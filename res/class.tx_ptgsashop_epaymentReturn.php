<?php
/***************************************************************
*  Copyright notice
*  
*  (c) 2006 Rainer Kuhn (kuhn@punkt.de)
*  All rights reserved
*
*  This script is part of the TYPO3 project. The TYPO3 project is 
*  free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
* 
*  The GNU General Public License can be found at
*  http://www.gnu.org/copyleft/gpl.html.
* 
*  This script is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  This copyright notice MUST APPEAR in all copies of the script!
***************************************************************/
/** 
 * ePayment return class for the payment extension 'pt_heidelpay'
 *
 * $Id: class.tx_ptgsashop_epaymentReturn.php,v 1.6 2007/07/27 10:57:51 ry37 Exp $
 *
 * @author  Rainer Kuhn <kuhn@punkt.de>
 * @since   2006-09-05
 */ 
/**
 * [CLASS/FUNCTION INDEX of SCRIPT]
 *
 */



/**
 * Inclusion of extension specific resources
 */
 
/**
 * Inclusion of external resources
 */
require_once t3lib_extMgm::extPath('pt_tools').'res/objects/class.tx_pttools_exception.php'; // general exception class
require_once t3lib_extMgm::extPath('pt_tools').'res/staticlib/class.tx_pttools_debug.php'; // debugging class with trace() function
require_once t3lib_extMgm::extPath('pt_tools').'res/objects/class.tx_pttools_sessionStorageAdapter.php'; // storage adapter for TYPO3 _browser_ sessions



/**
 * ePayment return class
 *
 * @author      Rainer Kuhn <kuhn@punkt.de>
 * @since       2006-09-05
 * @package     TYPO3
 * @subpackage  tx_ptgsashop
 */
class tx_ptgsashop_epaymentReturn {
    
    /**
     * Properties
     */
    protected $amount = 0.00; // (float) total sum to pay (use "." as decimal point!)
    protected $currency = ''; // (string) currency of payment (the ISO three letter currency code specifying the used currency, e.g. EUR for Euro, USD for US Dollar)
    protected $bookingId = ''; // (string) unique identifier of the user's shopping transaction ("Vorgangsnummer"), used by the shop system to re-assign the payment transaction to the reason for payment
    protected $description = ''; // (string) description of payment, has been sent to Heidelpay and will be printed on the customers invoice from Heidelpay
    protected $successHash = ''; // (string) md5 hash built by the epayment extension for sucessful transaction (used for security check)
     
    protected $status = ''; // (string) 'successful'/'notSuccessful'/'aborted'
    protected $transactionId = ''; // (string) unique transaction identifier, generated by pt_heidelpay extension (shop operator side). This ID is returned in all pt_heidelpay configurations and cases.
    protected $referenceId = ''; // (string) unique transaction reference identifier, generated by Heidelpay server (payment provider side). This ID is returned in all pt_heidelpay configurations, if a connection to the heidelpay server has been established.
    protected $shortId = ''; // (string) non-unique transaction identifier "for manual entry and search purposes", generated by Heidelpay (payment provider side). This ID is not returned in all pt_heidelpay configurations (WPF frontend only).
    protected $returnCode = ''; // (string) code identifying the transaction result, generated by Heidelpay server or by pt_heidelpay extension
    protected $returnMsg = ''; // (string) message describing the transaction result, generated by Heidelpay server or by pt_heidelpay extension
    
    /**
     * Class Constants
     */
    const SESSION_KEY_NAME_RETURN_ARRAY = 'pt_heidelpay_result'; // (string) name of the session array used by the epayment extension to store the return data into
    
    
    
    /***************************************************************************
     *   CONSTRUCTOR
     **************************************************************************/
     
    /**
     * Class constructor: reads the return data array from the epayment extension from browser session, "fills" its content to object properties and deletes the session array
     * 
     * @param   string      "salt" string used by the the epayment extension for building an md5 hash for successful transactions (used for security check)  
     * @return  void
     * @throws  tx_pttools_exception    if no valid epayment return array could be found in session
     * @throws  tx_pttools_exception    if MD5 security check for successful transaction fails
     * @author  Rainer Kuhn <kuhn@punkt.de>
     * @since   2006-09-05
     */
    public function __construct($salt) {
        
        $checkHash = '';
        
        // get return data array from epayment extension from TYPO3 browser session
        $paymentReturnArr = tx_pttools_sessionStorageAdapter::getInstance()->read(self::SESSION_KEY_NAME_RETURN_ARRAY);
        trace($paymentReturnArr, 0, '$paymentReturnArr');
        
        // throw exception if no valid epayment return array is found in session
        if (!is_array($paymentReturnArr) || empty($paymentReturnArr['status'])) {
            throw new tx_pttools_exception('No valid epayment return found.', 0, 'Could not find a valid epayment return array in session.');
        }
        
        // assign object properties from epayment return data array
        $this->amount = (double)$paymentReturnArr['amount'];
        $this->currency = (string)$paymentReturnArr['currency'];
        $this->bookingId = (string)$paymentReturnArr['book_id'];
        $this->description = (string)$paymentReturnArr['description'];
        $this->successHash = (string)$paymentReturnArr['success_hash'];
     
        $this->status = (string)$paymentReturnArr['status'];
        $this->transactionId = (string)$paymentReturnArr['transaction_id'];
        $this->referenceId = (string)$paymentReturnArr['reference_id'];
        $this->shortId = (string)$paymentReturnArr['short_id'];
        $this->returnCode = (string)$paymentReturnArr['return_code'];
        $this->returnMsg = (string)$paymentReturnArr['return_message'];
        
        // throws exception if security check for successful payments fails
        if ($this->status == 'successful') {
            $checkHash = md5($this->description . (string)$this->amount . $salt);
            if ($this->successHash != $checkHash) {
                throw new tx_pttools_exception('ePayment verification error.', 0, 'MD5 security check for successful transaction failed!.');
            }
        }
            
        // delete epayment return array from session
        tx_pttools_sessionStorageAdapter::getInstance()->delete(self::SESSION_KEY_NAME_RETURN_ARRAY); 
        
    }
    
    
    
    /***************************************************************************
     *   GENERAL METHODS
     **************************************************************************/
    
    
    
    /***************************************************************************
     *   PROPERTY GETTER/SETTER METHODS
     **************************************************************************/
    
    /**
     * Returns the property value
     *
     * @param   void        
     * @return  double      property value
     * @since   2006-09-05
     */
    public function get_amount() {
        
        return $this->amount;
        
    }
    
    /**
     * Returns the property value
     *
     * @param   void        
     * @return  string      property value
     * @since   2006-09-05
     */
    public function get_currency() {
        
        return $this->currency;
        
    }
    
    /**
     * Returns the property value
     *
     * @param   void        
     * @return  string      property value
     * @since   2006-09-15
     */
    public function get_bookingId() {
        
        return $this->bookingId;
        
    }
    
    /**
     * Returns the property value
     *
     * @param   void        
     * @return  string      property value
     * @since   2006-09-05
     */
    public function get_description() {
        
        return $this->description;
        
    }
    
    /**
     * Returns the property value
     *
     * @param   void        
     * @return  string      property value
     * @since   2006-09-05
     */
    public function get_status() {
        
        return $this->status;
        
    }
    
    /**
     * Returns the property value
     *
     * @param   void        
     * @return  string      property value
     * @since   2006-09-05
     */
    public function get_transactionId() {
        
        return $this->transactionId;
        
    }
    
    /**
     * Returns the property value
     *
     * @param   void        
     * @return  string      property value
     * @since   2006-09-05
     */
    public function get_referenceId() {
        
        return $this->referenceId;
        
    }
    
    /**
     * Returns the property value
     *
     * @param   void        
     * @return  string      property value
     * @since   2007-05-22
     */
    public function get_shortId() {
        
        return $this->shortId;
        
    }
    
    /**
     * Returns the property value
     *
     * @param   void        
     * @return  string      property value
     * @since   2006-09-05
     */
    public function get_returnCode() {
        
        return $this->returnCode;
        
    }
    
    /**
     * Returns the property value
     *
     * @param   void        
     * @return  string      property value
     * @since   2006-09-05
     */
    public function get_returnMsg() {
        
        return $this->returnMsg;
        
    }
    
    
    
} // end class



/*******************************************************************************
 *   TYPO3 XCLASS INCLUSION (for class extension/overriding)
 ******************************************************************************/
if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/pt_gsashop/res/class.tx_ptgsashop_epaymentReturn.php']) {
    include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/pt_gsashop/res/class.tx_ptgsashop_epaymentReturn.php']);
}

?>
